<launch>
  <!-- BEGIN:openrtm setting -->
  <arg name="nameserver" default="localhost" />
  <arg name="corba_port" default="2809" />
  <env name="RTCTREE_NAMESERVERS" value="$(arg nameserver):$(arg corba_port)" />
  <arg name="openrtm_args" value='-o "corba.nameservers:$(arg nameserver):$(arg corba_port)" -o "naming.formats:%n.rtc" -o "logger.file_name:/tmp/rtc%p.log" ' />
  <!-- END:openrtm setting -->

  <!-- Sample Service Bridge component -->
  <node name="bridge" pkg="openrtm_ros_bridge" type="MyServiceROSBridgeComp"
	args='$(arg openrtm_args)' output="screen">
    <param name="service_port" value="myservice0"/>
  </node>

  <!-- BEGIN:openrtm connection -->
  <node name="rtmlaunch_rosbridge" pkg="openrtm_tools" type="rtmlaunch.py"
        args="$(find openrtm_ros_bridge)/samples/myservice_rosbridge.launch"/>
  <rtactivate component="bridge.rtc" />
  <rtconnect from="MyServiceProvider0.rtc:MyService"
	     to="bridge.rtc:MyService"/>
  <!-- END:openrtm connection -->

  <sphinxdoc><![CDATA[

This is sample launch file for auto-generated ROS bridge for SimpleService in OpenRTM/samples.

.. image:: samples/image/service-rosbridge.png
  :width: 800

.. image:: samples/image/service-rosbridge-rxgraph.png
  :width: 800

MyServiceROSBridgeComp provides fowllonwg ros service

.. code-block:: bash

  $ rosservice  list
  /bridge/echo
  /bridge/get_echo_history
  /bridge/get_loggers
  /bridge/get_value
  /bridge/get_value_history
  /bridge/set_logger_level
  /bridge/set_value

from following IDL file

.. code-block:: bash

  module SimpleService {
  typedef sequence<string> EchoList;
  typedef sequence<float> ValueList;
  interface MyService
  {
    string echo(in string msg);
    EchoList get_echo_history();
    void set_value(in float value);
    float get_value();
    ValueList get_value_history();
  };
  };

Now you can call OpenRTM service in MyServiceProviderComp from following ros command

.. code-block:: bash

 rosservice call /bridge/echo "hello , this is echo sample"

  ]]></sphinxdoc>

</launch>
