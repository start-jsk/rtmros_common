<launch>
  <arg name="MODEL_FILE" />
  <arg name="COLLADA_FILE" />
  <arg name="CONF_FILE_ARG" default="" />
  <arg name="SIMULATOR_NAME" default="RobotHardware0"/> <!-- please set $(arg ROBOT_NAME)(Robot) for simulation -->
  <arg name="INSTALL_ROBOT_DESCRIPTION" default="true" />

  <arg name="USE_DIAGNOSTICS" default="true" />

  <!-- Set these values false when using HIRO -->
  <arg name="USE_COMMON" default="true" />
  <arg name="USE_ROBOTHARDWARE" default="false" />
  <arg name="USE_WALKING" default="false" />
  <arg name="USE_COLLISIONCHECK" default="true" />
  <arg name="USE_IMPEDANCECONTROLLER" default="false" />
  <arg name="USE_GRASPCONTROLLER" default="false" />
  <arg name="USE_TORQUECONTROLLER" default="false" />
  <arg name="USE_SOFTERRORLIMIT" default="true" />
  <arg name="USE_TORQUEFILTER" default="false" />
  <arg name="USE_IMAGESENSOR" default="false" />
  <!--
      roslaunch hrpsys_ros_bridge sample.launch nameserver:=192.168.1.1
  -->
  <!-- BEGIN:openrtm setting -->
  <arg name="nameserver" default="localhost" />
  <arg name="corbaport" default="15005" />
  <env name="RTCTREE_NAMESERVERS" value="$(arg nameserver):$(arg corbaport)" />
  <arg name="omniorb_args" default="-ORBInitRef NameService=corbaloc:iiop:$(arg nameserver):$(arg corbaport)/NameService" />
  <arg name="openrtm_args" default='-o "corba.nameservers:$(arg nameserver):$(arg corbaport)" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.type:PeriodicExecutionContext" -o "exec_cxt.periodic.rate:2000" -o "logger.file_name:/tmp/rtc%p.log"' />
  <!-- END:openrtm setting -->
  <arg name="OUTPUT" default="screen"/>
  <env name="LANG" value="C" />
  <env name="ORBgiopMaxMsgSize" value="2147483648" />

  <node name = "HrpsysSeqStateROSBridge"
        pkg  = "hrpsys_ros_bridge"
        type = "HrpsysSeqStateROSBridge"
        args = "$(arg openrtm_args) -o model:$(arg MODEL_FILE) $(arg CONF_FILE_ARG)"
        output = "$(arg OUTPUT)" />
  <node name = "HrpsysJointTrajectoryBridge"
        pkg  = "hrpsys_ros_bridge"
        type = "HrpsysJointTrajectoryBridge"
        args = "$(arg openrtm_args) -o model:$(arg MODEL_FILE)"
        output = "$(arg OUTPUT)" />

  <group if="$(arg INSTALL_ROBOT_DESCRIPTION)" >
    <param name="robot_description" textfile="$(arg COLLADA_FILE)" />
    <node pkg="robot_state_publisher" type="state_publisher" name="hrpsys_state_publisher" />
  </group>

  <!-- diagnostics -->
  <group if="$(arg USE_DIAGNOSTICS)" >
    <node pkg="hrpsys_ros_bridge" name="hrpsys_ros_diagnostics" type="diagnostics.py" />
    <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
      <rosparam command="load" file="$(find hrpsys_ros_bridge)/scripts/diagnostics.yaml" />
    </node>
  </group>
  <node pkg="hrpsys_ros_bridge" name="hrpsys_profile" type="hrpsys_profile.py" args="$(arg omniorb_args)"/>

  <node pkg="hrpsys_ros_bridge" name="sensor_ros_bridge_connect" type="sensor_ros_bridge_connect.py"
        args="$(arg MODEL_FILE) $(arg SIMULATOR_NAME) HrpsysSeqStateROSBridge0 $(arg nameserver) $(arg omniorb_args)" output="$(arg OUTPUT)"/>
  <!-- BEGIN:openrtm connection -->
  <env name="SIMULATOR_NAME" value="$(arg SIMULATOR_NAME)" />
  <node name="rtmlaunch_hrpsys_ros_bridge" pkg="openrtm_tools" type="rtmlaunch.py" args="$(find hrpsys_ros_bridge)/launch/hrpsys_ros_bridge.launch USE_COMMON=$(arg USE_COMMON) USE_WALKING=$(arg USE_WALKING) USE_COLLISIONCHECK=$(arg USE_COLLISIONCHECK) USE_IMPEDANCECONTROLLER=$(arg USE_IMPEDANCECONTROLLER) USE_SOFTERRORLIMIT=$(arg USE_SOFTERRORLIMIT) USE_IMAGESENSOR=$(arg USE_IMAGESENSOR) USE_ROBOTHARDWARE=$(arg USE_ROBOTHARDWARE) USE_TORQUECONTROLLER=$(arg USE_TORQUECONTROLLER) USE_TORQUEFILTER=$(arg USE_TORQUEFILTER)" output="$(arg OUTPUT)"/>


  <!-- All Robots -->
  <!-- USE_COMMON
      RobotHardware
      SequencePlayer
      DataLogger
      ForwardKinematics
      StateHolder
  -->
  <group if="$(arg USE_COMMON)" >
    <node pkg="hrpsys_ros_bridge" name="SequencePlayerServiceROSBridge" type="SequencePlayerServiceROSBridgeComp"
          output="$(arg OUTPUT)" args="$(arg openrtm_args)" />
    <node pkg="hrpsys_ros_bridge" name="DataLoggerServiceROSBridge" type="DataLoggerServiceROSBridgeComp"
          output="$(arg OUTPUT)" args="$(arg openrtm_args)" />
    <node pkg="hrpsys_ros_bridge" name="ForwardKinematicsServiceROSBridge" type="ForwardKinematicsServiceROSBridgeComp"
          output="$(arg OUTPUT)" args="$(arg openrtm_args)" />
    <node pkg="hrpsys_ros_bridge" name="StateHolderServiceROSBridge" type="StateHolderServiceROSBridgeComp"
          output="screen" args ="$(arg openrtm_args)" />

    <rtconnect from="$(arg SIMULATOR_NAME).rtc:q" to="HrpsysSeqStateROSBridge0.rtc:rsangle" subscription_type="new"/>
    <rtconnect from="$(arg SIMULATOR_NAME).rtc:tau" to="HrpsysSeqStateROSBridge0.rtc:rstorque" subscription_type="new" unless="$(arg USE_TORQUEFILTER)"/>
    <rtconnect from="StateHolderServiceROSBridge.rtc:StateHolderService" to="sh.rtc:StateHolderService"  subscription_type="new"/>
    <group unless="$(arg USE_WALKING)">
      <rtconnect from="sh.rtc:baseTformOut" to="HrpsysSeqStateROSBridge0.rtc:baseTform" subscription_type="new"/>
    </group>
    <rtconnect from="sh.rtc:qOut" to="HrpsysSeqStateROSBridge0.rtc:mcangle" subscription_type="new"/>
    <rtconnect from="HrpsysSeqStateROSBridge0.rtc:SequencePlayerService" to="seq.rtc:SequencePlayerService" subscription_type="new"/>
    <rtconnect from="HrpsysJointTrajectoryBridge0.rtc:SequencePlayerService" to="seq.rtc:SequencePlayerService" subscription_type="new"/>
    <rtconnect from="DataLoggerServiceROSBridge.rtc:DataLoggerService" to="log.rtc:DataLoggerService" subscription_type="new"/>
    <rtconnect from="SequencePlayerServiceROSBridge.rtc:SequencePlayerService" to="seq.rtc:SequencePlayerService" subscription_type="new"/>
    <rtconnect from="ForwardKinematicsServiceROSBridge.rtc:ForwardKinematicsService" to="fk.rtc:ForwardKinematicsService" subscription_type="new"/>

    <rtactivate component="HrpsysSeqStateROSBridge0.rtc" />
    <rtactivate component="HrpsysJointTrajectoryBridge0.rtc" />
    <rtactivate component="DataLoggerServiceROSBridge.rtc" />
    <rtactivate component="SequencePlayerServiceROSBridge.rtc" />
    <rtactivate component="ForwardKinematicsServiceROSBridge.rtc" />
    <rtactivate component="StateHolderServiceROSBridge.rtc" />
  </group>

  <group if="$(arg USE_ROBOTHARDWARE)" >
    <node pkg="hrpsys_ros_bridge" name="RobotHardwareServiceROSBridge" type="RobotHardwareServiceROSBridgeComp"
          output="screen" args ="$(arg openrtm_args)" />
    <rtconnect from="RobotHardwareServiceROSBridge.rtc:RobotHardwareService" to="$(arg SIMULATOR_NAME).rtc:RobotHardwareService"  subscription_type="new"/>
    <rtconnect from="$(arg SIMULATOR_NAME).rtc:servoState" to="HrpsysSeqStateROSBridge0.rtc:servoState" subscription_type="new" unless="$(arg USE_SOFTERRORLIMIT)"/>
    <rtactivate component="RobotHardwareServiceROSBridge.rtc" />
  </group>

  <!-- USE_WALING
      AutoBalancer
      Stabilizer
  -->
  <group if="$(arg USE_WALKING)" >
    <node pkg="hrpsys_ros_bridge" name="AutoBalancerServiceROSBridge" type="AutoBalancerServiceROSBridgeComp"
          output="screen" args ="$(arg openrtm_args)" />
    <node pkg="hrpsys_ros_bridge" name="StabilizerServiceROSBridge" type="StabilizerServiceROSBridgeComp"
          output="screen" args ="$(arg openrtm_args)" />
    <rtconnect from="abc.rtc:baseTformOut" to="HrpsysSeqStateROSBridge0.rtc:baseTform" subscription_type="new"/>
    <rtconnect from="kf.rtc:rpy" to="HrpsysSeqStateROSBridge0.rtc:baseRpy" subscription_type="new"/>
    <rtconnect from="st.rtc:zmp" to="HrpsysSeqStateROSBridge0.rtc:rszmp" subscription_type="new"/>
    <rtconnect from="AutoBalancerServiceROSBridge.rtc:AutoBalancerService" to="abc.rtc:AutoBalancerService"  subscription_type="new"/>
    <rtconnect from="StabilizerServiceROSBridge.rtc:StabilizerService" to="st.rtc:StabilizerService"  subscription_type="new"/>
    <rtactivate component="AutoBalancerServiceROSBridge.rtc" />
    <rtactivate component="StabilizerServiceROSBridge.rtc" />
  </group>

  <!-- USE_COLLISIONCHECK
       CollisionDetector
  -->
  <group if="$(arg USE_COLLISIONCHECK)" >
    <node pkg="hrpsys_ros_bridge" name="CollisionDetectorServiceROSBridge" type="CollisionDetectorServiceROSBridgeComp"
          output="$(arg OUTPUT)" args="$(arg openrtm_args)" />

    <rtconnect from="CollisionDetectorServiceROSBridge.rtc:CollisionDetectorService" to="co.rtc:CollisionDetectorService" subscription_type="new"/>
    <rtactivate component="CollisionDetectorServiceROSBridge.rtc" />
    <node pkg="hrpsys_ros_bridge" name="collision_state" type="collision_state.py"
          args="$(arg MODEL_FILE) $(arg omniorb_args)" output="$(arg OUTPUT)"/>
  </group>

  <!-- USE_IMPEDANCECONTROLLER
       ImpedanceController
       RemoveForceSensorLinkOffset
  -->
  <group if="$(arg USE_IMPEDANCECONTROLLER)" >
    <node pkg="hrpsys_ros_bridge" name="ImpedanceControllerServiceROSBridge" type="ImpedanceControllerServiceROSBridgeComp"
          output="screen" args ="$(arg openrtm_args)" />
    <node pkg="hrpsys_ros_bridge" name="RemoveForceSensorLinkOffsetServiceROSBridge" type="RemoveForceSensorLinkOffsetServiceROSBridgeComp"
          output="$(arg OUTPUT)" args="$(arg openrtm_args)" />

    <rtconnect from="ImpedanceControllerServiceROSBridge.rtc:ImpedanceControllerService" to="ic.rtc:ImpedanceControllerService"  subscription_type="new"/>
    <rtactivate component="ImpedanceControllerServiceROSBridge.rtc" />
    <rtconnect from="RemoveForceSensorLinkOffsetServiceROSBridge.rtc:RemoveForceSensorLinkOffsetService" to="rmfo.rtc:RemoveForceSensorLinkOffsetService"  subscription_type="new"/>
    <rtactivate component="RemoveForceSensorLinkOffsetServiceROSBridge.rtc" />
  </group>

  <!-- USE_GRASPCONTROLLER
       GraspController
  -->
  <group if="$(arg USE_GRASPCONTROLLER)" >
    <node pkg="hrpsys_ros_bridge" name="GraspControllerServiceROSBridge" type="GraspControllerServiceROSBridgeComp"
          output="screen" args ="$(arg openrtm_args)" />
    <rtconnect from="GraspControllerServiceROSBridge.rtc:GraspControllerService" to="gc.rtc:GraspControllerService"  subscription_type="new"/>
    <rtactivate component="GraspControllerServiceROSBridge.rtc" />
  </group>

  <!-- USE_TORQUECONTROLLER
       TorqueController
  -->
  <group if="$(arg USE_TORQUECONTROLLER)" >
    <node pkg="hrpsys_ros_bridge" name="TorqueControllerServiceROSBridge" type="TorqueControllerServiceROSBridgeComp"
          output="screen" args ="$(arg openrtm_args)" />
    <rtconnect from="TorqueControllerServiceROSBridge.rtc:TorqueControllerService" to="tc.rtc:TorqueControllerService"  subscription_type="new"/>
    <rtactivate component="TorqueControllerServiceROSBridge.rtc" />
  </group>

  <!-- USE_TORQUEFILTER
       TorqueFilter
  -->
  <group if="$(arg USE_TORQUEFILTER)" >
    <rtconnect from="tf.rtc:tauOut" to="HrpsysSeqStateROSBridge0.rtc:rstorque" subscription_type="new"/>
  </group>
  
  <!-- USE_SOFTERRORLIMIT
       SoftErrorLimitter
  -->
  <group if="$(arg USE_SOFTERRORLIMIT)" >
    <node pkg="hrpsys_ros_bridge" name="SoftErrorLimiterServiceROSBridge" type="SoftErrorLimiterServiceROSBridgeComp"
          output="screen" args ="$(arg openrtm_args)" />
    <rtconnect from="SoftErrorLimiterServiceROSBridge.rtc:SoftErrorLimiterService" to="el.rtc:SoftErrorLimiterService"  subscription_type="new"/>
    <rtconnect from="el.rtc:servoStateOut" to="HrpsysSeqStateROSBridge0.rtc:servoState" subscription_type="new"/>
    <rtactivate component="SoftErrorLimiterServiceROSBridge.rtc" />
  </group>

  <!-- USER_IMAGESENSOR
       ImageSensor
  -->
  <group if="$(arg USE_IMAGESENSOR)" >
    <node pkg="hrpsys_ros_bridge" name="ImageSensorROSBridge" type="ImageSensorROSBridge"
          output="$(arg OUTPUT)" args="$(arg openrtm_args)" >
      <param name="frame_id" value="/VISION_SENSOR1" />
    </node>

    <rtconnect from="$(arg SIMULATOR_NAME).rtc:left-eye" to="ImageSensorROSBridge0.rtc:image" />
    <rtactivate component="ImageSensorROSBridge0.rtc" />
  </group>

  <!-- END:openrtm connection -->
</launch>

